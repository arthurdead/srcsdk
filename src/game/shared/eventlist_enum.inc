#ifndef EVENTLIST_ENUM
	#define EVENTLIST_ENUM(name, type, ...)
#endif

EVENTLIST_ENUM(AE_INVALID, 0, -1) // So we have something more succint to check for than '-1'
EVENTLIST_ENUM(AE_EMPTY, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_LEFTFOOT, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_RIGHTFOOT, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_BODYDROP_LIGHT, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_BODYDROP_HEAVY, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_SWISHSOUND, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_180TURN, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_ITEM_PICKUP, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_WEAPON_DROP, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_WEAPON_SET_SEQUENCE_NAME, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_WEAPON_SET_SEQUENCE_NUMBER, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_WEAPON_SET_ACTIVITY, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_HOLSTER, AE_TYPE_SERVER)
EVENTLIST_ENUM(AE_NPC_DRAW, AE_TYPE_SERVER)
EVENTLIST_ENUM(AE_NPC_WEAPON_FIRE, AE_TYPE_SERVER|AE_TYPE_WEAPON)

EVENTLIST_ENUM(AE_CL_PLAYSOUND, AE_TYPE_CLIENT)
EVENTLIST_ENUM(AE_SV_PLAYSOUND, AE_TYPE_SERVER)
EVENTLIST_ENUM(AE_CL_STOPSOUND, AE_TYPE_CLIENT)

EVENTLIST_ENUM(AE_START_SCRIPTED_EFFECT, AE_TYPE_SERVER)
EVENTLIST_ENUM(AE_STOP_SCRIPTED_EFFECT, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_CLIENT_EFFECT_ATTACH, AE_TYPE_CLIENT)

EVENTLIST_ENUM(AE_MUZZLEFLASH, AE_TYPE_CLIENT)			// Muzzle flash from weapons held by the player
EVENTLIST_ENUM(AE_NPC_MUZZLEFLASH, AE_TYPE_CLIENT)		// Muzzle flash from weapons held by NPCs

EVENTLIST_ENUM(AE_THUMPER_THUMP, AE_TYPE_SERVER)		//Thumper Thump!
EVENTLIST_ENUM(AE_AMMOCRATE_PICKUP_AMMO, AE_TYPE_SERVER)	//Ammo crate pick up ammo!

EVENTLIST_ENUM(AE_NPC_RAGDOLL, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_ADDGESTURE, AE_TYPE_SERVER)
EVENTLIST_ENUM(AE_NPC_RESTARTGESTURE, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_ATTACK_BROADCAST, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_NPC_HURT_INTERACTION_PARTNER, AE_TYPE_SERVER)
EVENTLIST_ENUM(AE_NPC_SET_INTERACTION_CANTDIE, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_SV_DUSTTRAIL, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_CL_CREATE_PARTICLE_EFFECT, AE_TYPE_CLIENT)
EVENTLIST_ENUM(AE_CL_STOP_PARTICLE_EFFECT, AE_TYPE_CLIENT)
EVENTLIST_ENUM(AE_CL_ADD_PARTICLE_EFFECT_CP, AE_TYPE_CLIENT)
EVENTLIST_ENUM(AE_CL_CREATE_PARTICLE_BRASS, AE_TYPE_CLIENT)

EVENTLIST_ENUM(AE_RAGDOLL, AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_CL_ENABLE_BODYGROUP, AE_TYPE_CLIENT)
EVENTLIST_ENUM(AE_CL_DISABLE_BODYGROUP, AE_TYPE_CLIENT)
EVENTLIST_ENUM(AE_CL_BODYGROUP_SET_VALUE, AE_TYPE_CLIENT)
EVENTLIST_ENUM(AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN, AE_TYPE_CLIENT)

EVENTLIST_ENUM(AE_WPN_PRIMARYATTACK, AE_TYPE_CLIENT|AE_TYPE_SERVER)	// Used by weapons that want their primary attack to occur during an attack anim (i.e. grenade throwing)
EVENTLIST_ENUM(AE_WPN_INCREMENTAMMO, AE_TYPE_CLIENT|AE_TYPE_SERVER)

EVENTLIST_ENUM(AE_WPN_HIDE, AE_TYPE_CLIENT|AE_TYPE_SERVER)		// Used to hide player weapons
EVENTLIST_ENUM(AE_WPN_UNHIDE, AE_TYPE_CLIENT|AE_TYPE_SERVER)		// Used to unhide player weapons

EVENTLIST_ENUM(AE_WPN_PLAYWPNSOUND, AE_TYPE_CLIENT|AE_TYPE_SERVER)	// Play a weapon sound from the weapon script file

EVENTLIST_ENUM(AE_NPC_RESPONSE, AE_TYPE_SERVER)	// Play a response system concept if we're not speaking
EVENTLIST_ENUM(AE_NPC_RESPONSE_FORCED, AE_TYPE_SERVER)		// Always play a response system concept

EVENTLIST_ENUM(SCRIPT_EVENT_DEAD, AE_TYPE_SCRIPTED, 1000) // character is now dead
EVENTLIST_ENUM(SCRIPT_EVENT_NOINTERRUPT, AE_TYPE_SCRIPTED, 1001) // does not allow interrupt
EVENTLIST_ENUM(SCRIPT_EVENT_CANINTERRUPT, AE_TYPE_SCRIPTED, 1002) // will allow interrupt
EVENTLIST_ENUM(SCRIPT_EVENT_FIREEVENT, AE_TYPE_SCRIPTED, 1003) // Fires OnScriptEventXX output in the script entity, where XX is the event number from the options data.
EVENTLIST_ENUM(SCRIPT_EVENT_SOUND, AE_TYPE_SCRIPTED, 1004) // Play named wave file (on CHAN_BODY)
EVENTLIST_ENUM(SCRIPT_EVENT_SENTENCE, AE_TYPE_SCRIPTED, 1005) // Play named sentence
EVENTLIST_ENUM(SCRIPT_EVENT_INAIR, AE_TYPE_SCRIPTED, 1006) // Leave the character in air at the end of the sequence (don't find the floor)
EVENTLIST_ENUM(SCRIPT_EVENT_ENDANIMATION, AE_TYPE_SCRIPTED, 1007) // Set the animation by name after the sequence completes
EVENTLIST_ENUM(SCRIPT_EVENT_SOUND_VOICE, AE_TYPE_SCRIPTED, 1008) // Play named wave file (on CHAN_VOICE)
EVENTLIST_ENUM(SCRIPT_EVENT_SENTENCE_RND1, AE_TYPE_SCRIPTED, 1009) // Play sentence group 25% of the time
EVENTLIST_ENUM(SCRIPT_EVENT_NOT_DEAD, AE_TYPE_SCRIPTED, 1010) // Bring back to life (for life/death sequences)
EVENTLIST_ENUM(SCRIPT_EVENT_EMPHASIS, AE_TYPE_SCRIPTED, 1011) // Emphasis point for gestures

EVENTLIST_ENUM(SCRIPT_EVENT_BODYGROUPON, AE_TYPE_SCRIPTED, 1020) // Turn a bodygroup on
EVENTLIST_ENUM(SCRIPT_EVENT_BODYGROUPOFF, AE_TYPE_SCRIPTED, 1021) // Turn a bodygroup off
EVENTLIST_ENUM(SCRIPT_EVENT_BODYGROUPTEMP, AE_TYPE_SCRIPTED, 1022) // Turn a bodygroup on until this sequence ends

EVENTLIST_ENUM(SCRIPT_EVENT_FIRE_INPUT, AE_TYPE_SCRIPTED, 1100) // Fires named input on the event handler

EVENTLIST_ENUM(NPC_EVENT_BODYDROP_LIGHT, AE_TYPE_SHARED, 2001)
EVENTLIST_ENUM(NPC_EVENT_BODYDROP_HEAVY, AE_TYPE_SHARED, 2002)

EVENTLIST_ENUM(NPC_EVENT_SWISHSOUND, AE_TYPE_SHARED, 2010)

EVENTLIST_ENUM(NPC_EVENT_180TURN, AE_TYPE_SHARED, 2020)

EVENTLIST_ENUM(NPC_EVENT_ITEM_PICKUP, AE_TYPE_SHARED, 2040)
EVENTLIST_ENUM(NPC_EVENT_WEAPON_DROP, AE_TYPE_SHARED, 2041)
EVENTLIST_ENUM(NPC_EVENT_WEAPON_SET_SEQUENCE_NAME, AE_TYPE_SHARED, 2042)
EVENTLIST_ENUM(NPC_EVENT_WEAPON_SET_SEQUENCE_NUMBER, AE_TYPE_SHARED, 2043)
EVENTLIST_ENUM(NPC_EVENT_WEAPON_SET_ACTIVITY, AE_TYPE_SHARED, 2044)

EVENTLIST_ENUM(NPC_EVENT_LEFTFOOT, AE_TYPE_SHARED, 2050)
EVENTLIST_ENUM(NPC_EVENT_RIGHTFOOT, AE_TYPE_SHARED, 2051)

EVENTLIST_ENUM(NPC_EVENT_OPEN_DOOR, AE_TYPE_SHARED, 2060)

// !! DON'T CHANGE TO ORDER OF THESE.  THEY ARE HARD CODED IN THE WEAPON QC FILES (YUCK!) !!
EVENTLIST_ENUM(EVENT_WEAPON_MELEE_HIT, AE_TYPE_WEAPON, 3001)
EVENTLIST_ENUM(EVENT_WEAPON_SMG1, AE_TYPE_WEAPON, 3002)
EVENTLIST_ENUM(EVENT_WEAPON_MELEE_SWISH, AE_TYPE_WEAPON, 3003)
EVENTLIST_ENUM(EVENT_WEAPON_SHOTGUN_FIRE, AE_TYPE_WEAPON, 3004)
EVENTLIST_ENUM(EVENT_WEAPON_THROW, AE_TYPE_WEAPON, 3005)
EVENTLIST_ENUM(EVENT_WEAPON_AR1, AE_TYPE_WEAPON, 3006)
EVENTLIST_ENUM(EVENT_WEAPON_AR2, AE_TYPE_WEAPON, 3007)
EVENTLIST_ENUM(EVENT_WEAPON_HMG1, AE_TYPE_WEAPON, 3008)
EVENTLIST_ENUM(EVENT_WEAPON_SMG2, AE_TYPE_WEAPON, 3009)
EVENTLIST_ENUM(EVENT_WEAPON_MISSILE_FIRE, AE_TYPE_WEAPON, 3010)
EVENTLIST_ENUM(EVENT_WEAPON_SNIPER_RIFLE_FIRE, AE_TYPE_WEAPON, 3011)
EVENTLIST_ENUM(EVENT_WEAPON_AR2_GRENADE, AE_TYPE_WEAPON, 3012)
EVENTLIST_ENUM(EVENT_WEAPON_THROW2, AE_TYPE_WEAPON, 3013)
EVENTLIST_ENUM(EVENT_WEAPON_PISTOL_FIRE, AE_TYPE_WEAPON, 3014)
EVENTLIST_ENUM(EVENT_WEAPON_RELOAD, AE_TYPE_WEAPON, 3015)
EVENTLIST_ENUM(EVENT_WEAPON_THROW3, AE_TYPE_WEAPON, 3016)
EVENTLIST_ENUM(EVENT_WEAPON_RELOAD_SOUND, AE_TYPE_WEAPON, 3017)		// Use this + EVENT_WEAPON_RELOAD_FILL_CLIP to prevent shooting during the reload animation 
EVENTLIST_ENUM(EVENT_WEAPON_RELOAD_FILL_CLIP, AE_TYPE_WEAPON, 3018)
EVENTLIST_ENUM(EVENT_WEAPON_SMG1_BURST1, AE_TYPE_WEAPON, 3101)		// first round in a 3-round burst
EVENTLIST_ENUM(EVENT_WEAPON_SMG1_BURSTN, AE_TYPE_WEAPON, 3102)		// 2, 3 rounds
EVENTLIST_ENUM(EVENT_WEAPON_AR2_ALTFIRE, AE_TYPE_WEAPON, 3103)

EVENTLIST_ENUM(EVENT_WEAPON_SEQUENCE_FINISHED, AE_TYPE_WEAPON, 3900)

//Animation event codes
EVENTLIST_ENUM(CL_EVENT_FIRSTPERSON_MUZZLEFLASH0, AE_TYPE_CLIENT, 5001)	// Muzzleflash on attachment 0
EVENTLIST_ENUM(CL_EVENT_FIRSTPERSON_MUZZLEFLASH1, AE_TYPE_CLIENT, 5011)	// Muzzleflash on attachment 1
EVENTLIST_ENUM(CL_EVENT_FIRSTPERSON_MUZZLEFLASH2, AE_TYPE_CLIENT, 5021)	// Muzzleflash on attachment 2
EVENTLIST_ENUM(CL_EVENT_FIRSTPERSON_MUZZLEFLASH3, AE_TYPE_CLIENT, 5031)	// Muzzleflash on attachment 3
EVENTLIST_ENUM(CL_EVENT_SPARK0, AE_TYPE_CLIENT, 5002)	// Spark on attachment 0
EVENTLIST_ENUM(CL_EVENT_THIRDPERSON_MUZZLEFLASH0, AE_TYPE_CLIENT, 5003)	// Muzzleflash on attachment 0 for third person views
EVENTLIST_ENUM(CL_EVENT_THIRDPERSON_MUZZLEFLASH1, AE_TYPE_CLIENT, 5013)	// Muzzleflash on attachment 1 for third person views
EVENTLIST_ENUM(CL_EVENT_THIRDPERSON_MUZZLEFLASH2, AE_TYPE_CLIENT, 5023)	// Muzzleflash on attachment 2 for third person views
EVENTLIST_ENUM(CL_EVENT_THIRDPERSON_MUZZLEFLASH3, AE_TYPE_CLIENT, 5033)	// Muzzleflash on attachment 3 for third person views
EVENTLIST_ENUM(CL_EVENT_SOUND, AE_TYPE_CLIENT, 5004)	// Emit a sound // NOTE THIS MUST MATCH THE DEFINE AT CBaseEntity::PrecacheModel on the server!!!!!
EVENTLIST_ENUM(CL_EVENT_EJECTBRASS1, AE_TYPE_CLIENT, 6001)	// Eject a brass shell from attachment 1

// These two events are used by c_env_spritegroup.
// FIXME: Should this be local to c_env_spritegroup?
EVENTLIST_ENUM(CL_EVENT_SPRITEGROUP_CREATE, AE_TYPE_CLIENT, 6002)
EVENTLIST_ENUM(CL_EVENT_SPRITEGROUP_DESTROY, AE_TYPE_CLIENT, 6003)
EVENTLIST_ENUM(CL_EVENT_FOOTSTEP_LEFT, AE_TYPE_CLIENT, 6004)
EVENTLIST_ENUM(CL_EVENT_FOOTSTEP_RIGHT, AE_TYPE_CLIENT, 6005)
EVENTLIST_ENUM(CL_EVENT_MFOOTSTEP_LEFT, AE_TYPE_CLIENT, 6006) // Footstep sounds based on material underfoot.
EVENTLIST_ENUM(CL_EVENT_MFOOTSTEP_RIGHT, AE_TYPE_CLIENT, 6007)
EVENTLIST_ENUM(CL_EVENT_MFOOTSTEP_LEFT_LOUD, AE_TYPE_CLIENT, 6008) // Loud material impact sounds from feet attachments
EVENTLIST_ENUM(CL_EVENT_MFOOTSTEP_RIGHT_LOUD, AE_TYPE_CLIENT, 6009)

EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT0, AE_TYPE_CLIENT, 9001)	// Hook into a DispatchEffect on attachment 0
EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT1, AE_TYPE_CLIENT, 9011)	// Hook into a DispatchEffect on attachment 1
EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT2, AE_TYPE_CLIENT, 9021)	// Hook into a DispatchEffect on attachment 2
EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT3, AE_TYPE_CLIENT, 9031)	// Hook into a DispatchEffect on attachment 3
EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT4, AE_TYPE_CLIENT, 9041)	// Hook into a DispatchEffect on attachment 4
EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT5, AE_TYPE_CLIENT, 9051)	// Hook into a DispatchEffect on attachment 5
EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT6, AE_TYPE_CLIENT, 9061)	// Hook into a DispatchEffect on attachment 6
EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT7, AE_TYPE_CLIENT, 9071)	// Hook into a DispatchEffect on attachment 7
EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT8, AE_TYPE_CLIENT, 9081)	// Hook into a DispatchEffect on attachment 8
EVENTLIST_ENUM(CL_EVENT_DISPATCHEFFECT9, AE_TYPE_CLIENT, 9091)	// Hook into a DispatchEffect on attachment 9

#undef EVENTLIST_ENUM